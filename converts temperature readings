/*
 ============================================================================
 Advanced C Programming
 Author: Ronald Inselberg
 Assignment Number 01
 Topic: Preliminary C programming exercise
 File name: 3948-056-RonaldInselberg-01-Temperature.c
 Date: 01/27/2014
 Objective: Demonstrate basic C program structure, primitive data types (int, float, char) and rudimentary input/output.

 Comments:

 This runs as a stand-alone program that converts temperature readings between Fahrenheit and Celsius.
 All numeric calculations use ANSI-C primitive data type 'float' which uses a common 32-bit floating representation.
 The program displays numeric output in %10.2f format; for example, -459.67 Fahrenheit or -273.15 Celsius,
 and 212.00 Fahrenheit or 100.00 Celsius.

 All user input and output is through the console or command line interface.

 The program explains itself to the user before prompting for the first input:
 "This program converts temperature readings between Fahrenheit (F) and Celsius (C).
 For example, 32F converts to 0.00 Celsius, and -273.15C converts to -459.67 Fahrenheit.
 Input is case sensitive, and it expects upper case for F, C, and X. Helps to set the 'caps lock' key."


 The user input protocol is presented every time that the user is prompted for another input:
 "Enter a temperature (sign and decimal fraction optional) and append F or C. Enter 0X to quit:"

 Alphabetic inputs (F, C, and X) are required to be upper case.

 The user requests program termination by entering "0X", which may seem a little awkward, but by requiring the user to
 enter these two characters in sequence, it is somewhat more foolproof than depending on a single character. Although
 the user prompt specifies "0X" for termination, "00X", "0.0X" and "-0.000X" will also have the same effect. Any input
 that is interpreted as a temperature reading of zero (0.00) followed immediately by an "X" is interpreted as a program
 termination request.
 ============================================================================
 */

// include files
//
#include <stdio.h>
#include <stdlib.h>

// other preprocessor directives
//
// FOR_EVER serves as a Boolean constant "True" in 'while' loops
#define FOR_EVER 1

// prototype function declarations
float convertFahrenheitToCelsius(float celsius);
float convertCelsiusToFahrenheit(float fahrenheit);

// begin function definitions
//
// convert temperature reading from Fahrenheit to Celsius
float convertFahrenheitToCelsius(float fahrenheit) {
	float celsius;
	celsius = ((fahrenheit - 32) * 5) / 9;
	return celsius;
}

// convert temperature reading from Celsius to Fahrenheit
float convertCelsiusToFahrenheit(float celsius) {
	float fahrenheit;
	fahrenheit = ((celsius * 9) / 5) + 32;
	return fahrenheit;
}

// function main begins program execution
int main(void) {
	float temperature;
	char temperatureScale, skipPastInvalidInput;

	//
	// Inform the user of how the program works, and how to format the console or command line input.
	puts("This program converts temperature readings between Fahrenheit (F) and Celsius (C).");
	puts("For example, 32F converts to 0.00 Celsius, and -273.15C converts to -459.67 Fahrenheit.");
	puts("Input is case sensitive, and it expects upper case for F, C, and X. Helps to set the 'caps lock' key.\n");
	while (FOR_EVER) {
		//
		// Prompt for user input from the console or command line.
		puts("Enter a temperature (sign and decimal fraction optional) and append F or C. Enter 0X to quit:");
		//
		// Attempt to parse the user input.
		scanf("%f%c", &temperature, &temperatureScale);
		//
		// It's necessary to reset 'scanf's input pointer so that it does not keep processing the same input data.
		// This is done by reading more input, one character at a time, until '\n' (new line char) is encountered.
		do {
			scanf("%c", &skipPastInvalidInput);
		} while (skipPastInvalidInput != '\n');
		//
		// Interpret the user input.
		if (temperatureScale=='C') {
			//
			// User flagged temperature input by appending 'C' for Celsius. Show user how it has been interpreted.
			printf("input interpreted as %10.2f Celsius\n", temperature);
			//
			// Convert input to Fahrenheit and display it as output.
			printf("Fahrenheit = %10.2f\n\n", convertCelsiusToFahrenheit(temperature));
		} else if (temperatureScale=='F') {
			//
			// User flagged temperature input by appending 'F' for Fahrenheit. Show user how it has been interpreted.
			printf("input interpreted as %10.2f Fahrenheit\n", temperature);
			//
			// Convert input to Celsius and display it as output.
			printf("Celsius = %10.2f\n\n", convertFahrenheitToCelsius(temperature));
		} else if (temperature==0 && temperatureScale=='X') {
			//
			// The user has entered "0X". This is interpreted as the program termination request.
			break;

		} else {
			//
			// The user has entered unintelligible input.
			// Inform the user before looping and prompting for another input.
			puts("input does not conform to expected format");
		}
	}
	printf("responding to input '0X' by terminating");
	return EXIT_SUCCESS;
}
