/******************************************************************************/
/******************************* prologue *************************************/
/*                                                                            */
/*                                                                            */
/*                                                                            */
/*                       Advanced C Programming                               */
/*                                                                            */
/*                                                                            */
/*                                                                            */
/*              Programmer: Ronald Inselberg                                  */
/*                                                                            */
/*              Assignment Number: 05                                         */
/*                                                                            */
/*                                                                            */
/*              Topic: Pointers                                               */
/*                                                                            */
/*              Filename: RonaldInselberg-05-Pointers.c                       */
/*                                                                            */
/*              Date: February 8, 2014                                        */
/*                                                                            */
/*              Objective: Demonstrate pointers and dereferencing             */
/*                                                                            */
/*              Comments:                                                     */
/*                                                                            */
/*  All output is written to outputFile.txt                                   */
/*                                                                            */
/******************************************************************************/

// include files
#include <stdio.h>
#include <stdlib.h>

// function main begins program execution
int main(void) {

	int exitCondition = EXIT_FAILURE;
	FILE *outputFile = NULL;

	if ((outputFile  = fopen("outputFile.txt", "w")) == NULL) {
		printf("outputFile.txt could not be opened with write access\n"); // log to console
		// exit from conditional with exitCondition set to EXIT_FAILURE;

	} else {
		printf("output.txt opened for write access\n"); // log to console
		fprintf(outputFile, "output.txt opened for write access\n\n");

		// declare constants
		const int myInt = 25;
		const float myFloat = 3.142;
		const double myDouble =  1.73217;
		const char * const myString = "Hello C Programmer";
		const char myChar = 'x';

		// declare pointers (as constants) to the constants that were just declared
		const int * const pointer2myInt = &myInt;
		const float * const pointer2myFloat = &myFloat;
		const double * const pointer2myDouble = &myDouble;
		const char * const *pointer2myString = &myString;
		const char * const pointer2myChar = &myChar;

		// declare pointer (as a constant) to a pointer (also a constant) to the constant (int) that was originally declared
		const int * const *pointer2pointer2myInt = &pointer2myInt;

		// print the value of each constant
		fprintf(outputFile, "These are the constant values that were declared:\n");
		fprintf(outputFile, "myInt = %d\n", myInt);
		fprintf(outputFile, "myFloat = %6.3f\n", myFloat);
		fprintf(outputFile, "%myDouble = %8.5f\n", myDouble);
		fprintf(outputFile, "myString = %s\n", myString);
		fprintf(outputFile, "my Char = %c\n\n", myChar);

		// print the value of each pointer and dereference it to demonstrate that it points to the expected value
		fprintf(outputFile, "These are the values of the pointers to each constant, and the value when each pointer is dereferenced:\n");
		fprintf(outputFile, "%llu -> %d\n", pointer2myInt, *pointer2myInt);
		fprintf(outputFile, "%llu -> %6.3f\n", pointer2myFloat, *pointer2myFloat);
		fprintf(outputFile, "%llu -> %8.5f\n", pointer2myDouble, *pointer2myDouble);
		fprintf(outputFile, "%llu -> %s\n", pointer2myString, *pointer2myString);
		fprintf(outputFile, "%llu -> %c\n\n", pointer2myChar, *pointer2myChar);

		// validating the pointer that points to the pointer that points to the constant (int)
		// print the address of the pointer, dereference the pointer to demonstrate that it points to pointer2myInt,
		// and double dereference it to demonstrate the two-step memory path to the expected (int) constant
		fprintf(outputFile, "The address of the pointer that points to the pointer to the constant myInt.\n");
		fprintf(outputFile, "Dereferencing this pointer to a pointer yields the value of the pointer to the constant myInt.\n");
		fprintf(outputFile, "Double dereferencing this pointer to a pointer yields the value of the constant myInt:\n");
		fprintf(outputFile, "%llu -> %llu -> %d\n\n", &pointer2pointer2myInt, *pointer2pointer2myInt, **pointer2pointer2myInt);

		exitCondition = EXIT_SUCCESS;
		fprintf(outputFile, "terminating with exitCondition %d\n", exitCondition);

	} // end conditional when output file was opened without error

	// clean up output file
	if (fclose(outputFile) != 0) {
		printf("file close error on outputFile.txt\n"); // log to console
		exitCondition = -1;
	} else {
		printf("outputFile.txt was closed without error\n"); // log to console
		exitCondition = 0;
	}

	// program termination
	printf("terminating with exitCondition %d\n", exitCondition); // log to console
	return exitCondition;

} // end main
