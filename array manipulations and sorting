/******************************************************************************/
/******************************* prologue *************************************/
/*                                                                            */
/*                                                                            */
/*                                                                            */
/*                       Advanced C Programming                               */
/*                                                                            */
/*                                                                            */
/*                                                                            */
/*              Programmer: Ronald Inselberg                                  */
/*                                                                            */
/*              Assignment Number: 03                                         */
/*                                                                            */
/*                                                                            */
/*              Topic: Array Manipulations                                    */
/*                                                                            */
/*              Filename: RonaldInselberg-03-ArrayManipulations.c             */
/*                                                                            */
/*              Date: February 8, 2014                                        */
/*                                                                            */
/*              Objective: Practice array manipulations and sorting           */
/*                                                                            */
/*              Comments:                                                     */
/*                                                                            */
/*  The initial input (sequence of numbers) is read from the input file       */
/*  "input.txt". The output is written to "output.txt". All user interaction  */
/*  is via the console.                                                       */
/*                                                                            */
/*  The code works as intended, but there is too much nesting of loops and    */
/*  conditionals. The code needs to be partitioned into additional functions  */
/*  using function calls from main in order to reduce it to no more than      */
/*  three levels of nested scopes (code blocks).                              */
/*                                                                            */
/******************************************************************************/

// include files
#include <stdio.h>
#include <stdlib.h>
#include <stdbool.h>

// function main begins program execution
int main(void) {
	FILE *inputFile, *outputFile = NULL;
	int exitCondition, nread, numIn, array[99], howMany = 0;

	if ((inputFile = fopen("inputFile.txt", "r")) == NULL) {
		puts("inputFile.txt could not be opened with read access");
		exitCondition = -1;
	} else {

		// try to read numbers from input file, keep reading until error or EOF
		// each number goes into the first/next array element
		while (1== (nread = fscanf(inputFile,"%d,", &numIn))) {
			array[howMany] = numIn;
			howMany++;
		}
		if (ferror(inputFile)) {
			puts("file error on inputFile.txt");
			exitCondition = -1;
		} else if (nread != EOF) {
			puts("encountered unexpected data from inputFile.txt");
			exitCondition = -1;
		} else {
			puts("encountered EOF from inputFile.txt");
			if ((outputFile  = fopen("outputFile.txt", "w")) == NULL) {
				puts ("outputFile.txt could not be opened with write access");
				exitCondition = -1;
			} else {
				fprintf(outputFile, "input.txt opened for read access\n");
				fprintf(outputFile, "output.txt opened for write access\n");
				if (howMany == 0) {
					fprintf(outputFile, "no numbers were read in\n");
					exitCondition = -1;
				} else {

					// output the populated array elements in the order in which the numbers were received
					fprintf(outputFile, "array elements in order received\n");
					for (int i = 0; i < howMany; i++) {
						fprintf(outputFile, "%d ", array[i]);
					}
					fprintf(outputFile, "\n\n");

					// output the populated array elements in reverse order of how the numbers were received
					fprintf(outputFile, "array elements in reverse of order received\n");
					for (int i = 0; i < howMany; i++) {
						fprintf(outputFile, "%d ", array[ (howMany-1) - i]);
					}
					fprintf(outputFile, "\n\n");

					// bubble sort algorithm to sort array elements by ascending numerical order
					for (int pass=1; pass < howMany; pass++) {
						for (int i=0; i < howMany - pass; i++) {
							if (array[i] > array[i+1]) {
								int swap = array[i];
								array[i] = array[i+1];
								array[i+1] = swap;
							}
						}
					}

					// output sorted array elements
					fprintf(outputFile, "array elements after sorting in ascending numerical order\n");
					for (int i = 0; i < howMany; i++) {
						fprintf(outputFile, "%d ", array[i]);
					}
					fprintf(outputFile, "\n\n");

					// start console interaction with user
					fprintf(outputFile, "RECORD OF CONSOLE INTERACTION WITH USER BEGINS HERE\n");
					while (true) {
						puts("enter a number and if it is in the array, the index will be displayed");
						puts("or enter any non-numeric character to terminate:");
						if (1 == scanf("%d", &numIn)) {
							int i;
							for (i = 0; i < howMany; i++) {
								if (numIn == array[i]) {
									printf("array index is %d\n\n", i);
									fprintf(outputFile, "user entered %d  array index is %d\n", numIn, i);
									break;

								}
							}
							if (i == howMany) {
								printf("number is not in the array\n\n");
								fprintf(outputFile, "user entered %d  number is not in the array\n", numIn);
							}
						} else {
							puts("user requested program termination");
							fprintf(outputFile, "user requested program termination\n");
							break; // break out of console interaction with user loop

						} // end conditonal there was at least one number to read in the input file
					} // end conditional there was or was not at least one number to read in the input file
				} // end conditional was able to process input file without error
			} // end conditional was or was not to process input file without error
		} // end conditional was able to open input file
	} // end conditional was or was not able to open input file

	// clean up input file
	if (fclose(inputFile) != 0) {
		const char * const inputFileCloseErrorMsg = "file close error on inputFile.txt\n";
		printf("%s", inputFileCloseErrorMsg);
		fprintf(outputFile, "%s", inputFileCloseErrorMsg);
		exitCondition = -1;
	} else {
		const char * const inputFileCloseMsg = "inputFile.txt was closed without error\n";
		printf("%s", inputFileCloseMsg);
		fprintf(outputFile, "%s", inputFileCloseMsg);
		exitCondition = 0;
	}
	printf("terminating with exitCondition %d\n", exitCondition);
	fprintf(outputFile, "terminating with exitCondition %d\n", exitCondition);

	// clean up output file
	if (fclose(outputFile) != 0) {
		puts("file close error on outputFile.txt");
		exitCondition = -1;
	} else {
		puts("outputFile.txt was closed without error");
		exitCondition = 0;
	}

	// program termination
	return exitCondition;

} // end main
