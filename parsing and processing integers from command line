/*
 ============================================================================
 Advanced C Programming
 Author: Ronald Inselberg
 Assignment Number 02
 Topic: Preliminary C programming exercise
 File name: RonaldInselberg-02-Loops.c
 Date: 01/27/2014
 Objective: Demonstrate C program with loops.

 Comments:

 This runs as a stand-alone program that accepts a single line of input from the console or command line.
 
 It accepts a series of scores (unsigned integers from 0 to 100) separated by at least one comma (,) or space
 and outputs the number of scores, minimum score, maximum score and average score (to 0.01 resolution).

 The only functions called are puts, scanf and printf.

 The input line is parsed as sequence of zero or more unsigned integers (scores), delimited by one or more space characters
 and/or commas (' ' and/or ','). Any unexpected character before '\n' (newline) causes the program to terminate with
 an error message. Any score that is not within the range of 0-100 causes the program to terminate with an error message.
 Each score is displayed on a separate line as it is interpreted by the program, before the final output.
 ============================================================================
 */

// include files
//
#include <stdio.h>
#include <stdlib.h>
#include <stdbool.h>

// function main begins program execution
int main(void) {
	// All variable declarations are declared to have function scope within 'main'.
	// Perhaps this is not the best practice, as some variables could probably be localized to just a certain
	// (code) block within 'main'; however, I am submitting it now for the sake of complying with the nominal
	// assignment deadline.
	float averageScore;
	int numberOfScores, sumOfAllScores, minimumScore, maximumScore, score, intVal;
	char input;
	bool isNum, invalidInput, scoreOutOfRange, hasAtLeastOneDigit;

	// Set intial conditions.
	numberOfScores = 0;
	minimumScore = 101;
	maximumScore = -1;
	scoreOutOfRange = false;

	// Prompt user for input and skip past any leading insignificant characters (' ' or ',')
	puts("enter scores, unsigned, range from 0 to 100, separated by at least one comma or space, all on one line:");
	do {
		scanf("%c", &input);
	} while (input==' ' || input==',');

	// Process input, character by character, until '\n' (newline) is encountered.
	while (input != '\n') {
		score = 0;
		invalidInput = false;
		while (input != ' ' && input != ',' && input != '\n') {
			intVal = input - '0';
			isNum = intVal >= 0 && intVal <= 9;
			if (isNum) {
				// program "remembers" that it has encountered at least one digit
				hasAtLeastOneDigit = true;
				// as each successive digit is accepted, the previous digits become more significant by ten**1 (10)
				score = score * 10 + intVal;
				// ready to process the next character
				scanf("%c", &input);
			} else {
				// Encountered unexpected character, character that is not a digit (0-9) or delimiter (space, comma).
				// Break out and get onto a program termination path without processing any more characters.
				invalidInput = true;
				break;

			}
		}
		if (invalidInput != true) {
			if (hasAtLeastOneDigit) {
				if (score >= 0 && score <= 100) {
					// display score as interpreted and peform math functions associated with each score
					printf("%i\n", score);
					sumOfAllScores = sumOfAllScores + score;
					if (score < minimumScore) minimumScore = score;
					if (score > maximumScore) maximumScore = score;
					// increment number of scores
					numberOfScores++;
					//
					// reset for processing next score on input line (if there is one)
					hasAtLeastOneDigit = false;
					while (input != '\n' && (input==' ' || input==',' )) {
						scanf("%c", &input);

					}
				} else {
					// flag score as not within range (0-100) and break out to termination path
					scoreOutOfRange = true;
					break;
				}
			}
			else {
				//
				// 'hasAtLeastOneDigit' is not true, do not interpret input line with no digits as a zero (0) score.
				// break out to termination path
				break;

			}
		} else {
			// encounterd an unexpected character, break out to termination path
			break;

		}
		if (input == '\n') {
			// encountered end of line by recognizing '\n' (newline) character
			//
			// test to avoid division by zero if no valid scores have been processed
			if (numberOfScores > 0) {
				// Average computation must use floating point
				float sumOfAllScoresInFloatingPoint;
				sumOfAllScoresInFloatingPoint = sumOfAllScores;
				averageScore = sumOfAllScoresInFloatingPoint / numberOfScores;
				break;

			}
		} else if (invalidInput || scoreOutOfRange) {
			// recognize one of the abort processing conditions, unexpected character or score out of range
			// do not process remaining input characters
			// break out and onto termination path
			break;

		}
	}
	if (scoreOutOfRange) {
		printf("score entered is out of range");
	} else if (invalidInput) {
		printf("encountered an unexpected input character");
	} else if (numberOfScores==0) {
		printf("no valid scores were recognized in the input line");
	} else {
		printf("Number of scores %i  Minimum score %i  Maximum score %i  Average score %7.2f", numberOfScores, minimumScore, maximumScore, averageScore);
	}
	return EXIT_SUCCESS;
}
